import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.B358x4hV.js";const E=JSON.parse('{"title":"Deploy","description":"","frontmatter":{},"headers":[],"relativePath":"en/start/deploy.md","filePath":"en/start/deploy.md"}'),e={name:"en/start/deploy.md"},t=n(`<h1 id="deploy" tabindex="-1">Deploy <a class="header-anchor" href="#deploy" aria-label="Permalink to &quot;Deploy&quot;">​</a></h1><p>The &#39;web&#39; directory of this project provides a complete project developed based on the &#39;simple mind map&#39; library, &#39;Vue2. x&#39;, and &#39;ElementUI&#39;. The data is stored locally on the computer by default, and can also be manipulated locally on the computer. Originally intended as an online &#39;demo&#39;, it can also be directly used as an online version of the mind map application, online address: <a href="https://wanglin2.github.io/mind-map/" target="_blank" rel="noreferrer">https://wanglin2.github.io/mind-map/</a>.</p><p>If your network environment is slow to access the &#39;GitHub&#39; service, you can also deploy it to your server.</p><h2 id="deploying-to-a-static-file-server" tabindex="-1">Deploying to a static file server <a class="header-anchor" href="#deploying-to-a-static-file-server" aria-label="Permalink to &quot;Deploying to a static file server&quot;">​</a></h2><p>The project itself does not rely on the backend, so it can be deployed to a static file server. The following commands can be executed in sequence:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/wanglin2/mind-map.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mind-map</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simple-mind-map</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simple-mind-map</span></span></code></pre></div><p>Then you can choose to start the local service:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span></span></code></pre></div><p>You can also directly package and generate construction products:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>The packaged entry page &#39;index.html&#39; can be found in the project root directory, and the corresponding static resources are located in the &#39;dist&#39; directory under the root directory. The &#39;html&#39; file will access the resources in the &#39;dist&#39; directory through relative paths, such as &#39;dist/xxx&#39;. You can directly upload these two files or directories to your static file server. In fact, this project is deployed to &#39;GitHub Pages&#39; in this way.</p><p>If you do not have any code modification requirements, it is also possible to directly copy these files from this repository.</p><p>If you want to package &#39;index.html&#39; into the &#39;dist&#39; directory as well, you can modify the &#39;scripts.build&#39; command in the &#39;web/package.json&#39; file to delete &#39;&amp;&amp; node ../copy.js&#39; from &#39;vue-cli-service build &amp;&amp; node ../copy.js&#39;.</p><p>If you want to modify the directory for packaging output, you can modify the &#39;outputDir&#39; configuration of the &#39;web/vue.config.js&#39; file to the path you want to output.</p><p>If you want to modify the path of the &#39;index. html&#39; file referencing static resources, you can modify the &#39;publicPath&#39; configuration of the &#39;web/vue.config.js&#39; file. And the <code>window.externalPublicPath</code> config in <code>web/public/index.html</code> file.</p><p>In addition, the default route used is &#39;hash &#39;, which means that there will be &#39;#&#39;in the path. If you want to use the &#39;history&#39; route, you can modify the &#39;web/src/router.js&#39; file to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Change to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>However, this requires backend support, as our application is a single page client application. If the backend is not properly configured, users will return 404 when accessing sub routes directly in the browser. Therefore, you need to add a candidate resource on the server that covers all situations: if the &#39;URL&#39; cannot match any static resources, the same &#39;index. html&#39; page should be returned.</p><h2 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h2><h3 id="image-1" tabindex="-1">Image 1 <a class="header-anchor" href="#image-1" aria-label="Permalink to &quot;Image 1&quot;">​</a></h3><blockquote><p>Thank you very much <a href="https://github.com/Hraulein" target="_blank" rel="noreferrer">Hraulein</a>, the corresponding Docker package is maintained by him.</p></blockquote><blockquote><p>Supporting architecture: <code>amd64</code> <code>arm64</code> <code>arm/v7</code> <code>arm/v8</code></p></blockquote><h4 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h4><blockquote><p><code>docker cli</code></p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mind-map</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GIN_MODE=release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hraulein/mind-map:latest</span></span></code></pre></div><blockquote><p><code>docker compose</code></p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mind-map:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hraulein/mind-map:latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mind-map</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;8080:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GIN_MODE=release</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Debug is in debugging mode</span></span></code></pre></div><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><p>Enter the following address in the browser to use the web version of mind map: <code>http://$IP_ADDRESS:$PORT</code></p><p>Options:</p><ul><li><p><code>$IP_ADDRESS</code></p><ul><li>Local access: using <code>127.0.0.1</code> or <code>localhost</code></li><li>LAN access: Enter the internal IP address of the deployment host（Such as <code>172.16.19.156</code>）</li><li>Public network access (if available): Enter the server&#39;s public IP or domain name</li></ul></li><li><p><code>$PORT</code></p><ul><li>By default, port 8080 is used. If the port mapping is modified during startup (such as - p 8888:8080), the corresponding host port needs to be changed to the mapped port (i.e. 8888)</li></ul></li></ul><p>Example:</p><blockquote><p>Local access:<code>http://127.0.0.1:8080</code><br> LAN access:<code>http://172.16.19.156:8080</code><br> Custom port:<code>http://172.16.19.156:8888</code></p></blockquote><h4 id="nginx-reverse-proxy-configuration-optional" tabindex="-1">Nginx reverse proxy configuration (optional) <a class="header-anchor" href="#nginx-reverse-proxy-configuration-optional" aria-label="Permalink to &quot;Nginx reverse proxy configuration (optional)&quot;">​</a></h4><blockquote><p>Need domain name/HTTPS certificate</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># HTTP redirect HTTPS</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen 80 default_server;</span></span>
<span class="line"><span>    listen [::]:80 default_server;</span></span>
<span class="line"><span>    return 301 https://$host$request_uri;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>    listen 443 ssl;</span></span>
<span class="line"><span>    listen [::]:443 ssl;</span></span>
<span class="line"><span>    http2 on;    </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>    server_name mind-map.hraulein.localhost;   # &lt;&lt;&lt; Replace with your domain name</span></span>
<span class="line"><span>    set $IPADDR 172.16.19.156;                 # &lt;&lt;&lt; Replace with the internal IP address of your server</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ssl_certificate &#39;/etc/nginx/*****/*****/fullchain.cer&#39;;    # &lt;&lt;&lt; Replace with the actual certificate address</span></span>
<span class="line"><span>    ssl_certificate_key &#39;/etc/nginx/*****/*****/*****.key&#39;;    # &lt;&lt;&lt; Replace with the actual certificate address</span></span>
<span class="line"><span>    ssl_trusted_certificate &#39;/etc/nginx/*****/*****/ca.cer&#39;;   # &lt;&lt;&lt; Replace with the actual certificate address</span></span>
<span class="line"><span>    ssl_session_cache shared:SSL:1m;</span></span>
<span class="line"><span>    ssl_session_timeout 10m;</span></span>
<span class="line"><span>    ssl_session_tickets off;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span>    ssl_ciphers &#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&#39;;</span></span>
<span class="line"><span>    ssl_protocols TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span>    ssl_stapling on;</span></span>
<span class="line"><span>    ssl_stapling_verify on;</span></span>
<span class="line"><span>    resolver 8.8.8.8 1.1.1.1 valid=300s;</span></span>
<span class="line"><span>    resolver_timeout 5s;</span></span>
<span class="line"><span>    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        proxy_pass http://$IPADDR:8080;        # &lt;&lt;&lt; Replace with mind map service actual mapping port</span></span>
<span class="line"><span>        proxy_set_header Host $host;</span></span>
<span class="line"><span>        proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>        proxy_set_header Connection upgrade;</span></span>
<span class="line"><span>        proxy_set_header Accept-Encoding gzip;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="image-2" tabindex="-1">Image 2 <a class="header-anchor" href="#image-2" aria-label="Permalink to &quot;Image 2&quot;">​</a></h3><blockquote><p>Thank you very much <a href="https://github.com/shuiche-it" target="_blank" rel="noreferrer">水车</a>, the corresponding Docker package is maintained by him.</p></blockquote><p>Install directly from Docker Hub:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -d -p 8081:8080 shuiche/mind-map:latest</span></span></code></pre></div><p>Mindmap has activated port 8080 as the web service entry point in the container. When running the container through Docker, it is necessary to specify a local mapping port. In the above case, we mapped the local port 8081 to the container port 8080.</p><p>After the installation is completed, check the container&#39;s running status through &#39;Docker PS&#39;.</p><p>Open 127.0.0.1:8081 in the browser to use the Web mind map function.</p><p><a href="https://laosu.gq/2023/09/02/%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E5%BA%93SimpleMindMap/" target="_blank" rel="noreferrer">在群晖上以 Docker 方式安装</a></p><h2 id="deployment-instructions-for-using-baota-panel-docker" tabindex="-1">Deployment instructions for using Baota Panel Docker <a class="header-anchor" href="#deployment-instructions-for-using-baota-panel-docker" aria-label="Permalink to &quot;Deployment instructions for using Baota Panel Docker&quot;">​</a></h2><blockquote><p>This section of the document was written by <a href="https://github.com/bestlaw66" target="_blank" rel="noreferrer">bestlaw66</a>.</p></blockquote><h3 id="having-one-s-own-pagoda" tabindex="-1">Having one&#39;s own pagoda <a class="header-anchor" href="#having-one-s-own-pagoda" aria-label="Permalink to &quot;Having one&#39;s own pagoda&quot;">​</a></h3><p>Before deploying this project through the Pagoda Panel, you need to install the Pagoda Panel tool on the server first. The next deployment process is built on the premise of the existing pagoda panel. Please refer to the installation of the pagoda (<a href="https://www.bt.cn/new/download.html?r=dk_simple" target="_blank" rel="noreferrer">宝塔官网</a>)。</p><blockquote><p>Attention: This project requires Pagoda panel version 9.2.0 and above</p></blockquote><h3 id="one-click-installation" tabindex="-1">One click installation <a class="header-anchor" href="#one-click-installation" aria-label="Permalink to &quot;One click installation&quot;">​</a></h3><p><img src="https://github.com/user-attachments/assets/34994767-4662-46f4-bde7-3bb421165765" alt="install1"></p><ol><li><p>On the Baota panel -&gt;Docker -&gt;App Store page, search for Simple to find the Docker application for this project;</p></li><li><p>Click Install to start deploying this project;</p></li></ol><p><img src="https://github.com/user-attachments/assets/5b6e1863-1dac-40ae-9395-3ea25abe2b8d" alt="install2"></p><ol><li><p>On the project configuration page, start configuring environment variables according to the requirements;</p></li><li><p>If the option to allow external access to the configuration is checked, please note to grant security group port access permissions to the configured web port;</p></li><li><p>Click confirm to start automatic deployment;</p></li></ol><h3 id="how-to-access" tabindex="-1">How to access <a class="header-anchor" href="#how-to-access" aria-label="Permalink to &quot;How to access&quot;">​</a></h3><p>By using the server IP address and configured web port <a href="http://$" target="_blank" rel="noreferrer">http://$</a>(host)😒(port), open in browser Simple mind map.</p><p><img src="https://github.com/user-attachments/assets/451872fe-4a51-4712-ba82-efa98b0bd6ad" alt="install3"></p><h2 id="docking-with-one-s-own-storage-services" tabindex="-1">Docking with one&#39;s own storage services <a class="header-anchor" href="#docking-with-one-s-own-storage-services" aria-label="Permalink to &quot;Docking with one&#39;s own storage services&quot;">​</a></h2><p>The application data is stored locally in the browser by default, and the local storage capacity of the browser is relatively small, so it is easy to trigger restrictions when inserting more images in the mind map. Therefore, a better choice is to dock with your own storage service, which usually has two ways:</p><h3 id="the-first" tabindex="-1">The first <a class="header-anchor" href="#the-first" aria-label="Permalink to &quot;The first&quot;">​</a></h3><p>Simply clone the warehouse code and modify the relevant methods in &#39;web/src/API/index.js&#39; to obtain data from your database and store it in your data.</p><h3 id="the-second" tabindex="-1">The second <a class="header-anchor" href="#the-second" aria-label="Permalink to &quot;The second&quot;">​</a></h3><p>Many times, you may want to always use the latest code from this repository, so the first method is not very convenient because you need to manually merge the code, so the second method is provided.</p><p>Specific operating steps:</p><ol><li>Copy the packaged resources of the web application</li></ol><p>This includes the &#39;dist&#39; directory and the &#39;index.html&#39; file.</p><ol start="2"><li>Modify the copied &#39;index.html&#39; file</li></ol><p>Firstly, insert the following code into the &#39;head&#39; tag:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.takeOverApp = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This line of code will prompt the application not to initialize the application &#39;i.e.: new Vue()&#39;, but to give control to you. Next, insert your own &#39;js&#39; code at the end of the &#39;body&#39;, either inline or out of chain. The inline example is as follows:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // Your own method of requesting data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const getDataFromBackend = () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // MindMap data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          mindMapData: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            root: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;根节点&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;children&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            theme: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;avocado&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{} },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            layout: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logicalStructure&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            config: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            view: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Page language, supporting Chinese (zh) and English (en)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          lang: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Page Section Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          localConfig: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // Register Global Method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const setTakeOverAppMethods = (data) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Function for obtaining mind map data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMindMapData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.mindMapData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Functions for Saving Mind Map Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveMindMapData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // The trigger frequency of this function may be high, so you should do throttling or anti shaking measures</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Function to obtain language</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLanguage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.lang</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Functions for Saving Languages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveLanguage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lang)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get locally configured functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.localConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Save locally configured functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.takeOverAppMethods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveLocalConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.onload = async () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.takeOverApp) return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // request data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDataFromBackend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Method for setting global</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTakeOverAppMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Mind Map Instance Creation Completion Event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.$bus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app_inited&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mindMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mindMap)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can use window$ Bus$ On() to listen for some events in the application</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Instantiate Page</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>As shown above, when you set the &#39;window.takeOverApp=true&#39; flag, the application will no longer actively instantiate, but will expose the instantiated methods for you to call. You can first request the data of the mind map from the backend, and then register the relevant methods. The application will call internally at the appropriate time to achieve the purpose of echo and save.</p><p>The advantage of doing this is that whenever the code in this repository is updated, you can simply copy the packaged files to your own server. With a slight modification of the &#39;index. html&#39; page, you can achieve synchronous updates and use your own storage service.</p><h2 id="modifying-static-resource-paths" tabindex="-1">Modifying Static Resource Paths <a class="header-anchor" href="#modifying-static-resource-paths" aria-label="Permalink to &quot;Modifying Static Resource Paths&quot;">​</a></h2><p>If you want to maintain synchronous updates with the code in this repository as in the previous section, but also want to modify the storage location of static resources, for example, the default hierarchical relationship is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-dist</span></span>
<span class="line"><span>--css</span></span>
<span class="line"><span>--fonts</span></span>
<span class="line"><span>--img</span></span>
<span class="line"><span>--js</span></span>
<span class="line"><span>-logo.ico</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-index.html</span></span></code></pre></div><p>And you want to adjust it to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-assets</span></span>
<span class="line"><span>--dist</span></span>
<span class="line"><span>---css</span></span>
<span class="line"><span>---fonts</span></span>
<span class="line"><span>---img</span></span>
<span class="line"><span>---js</span></span>
<span class="line"><span>-logo.ico</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-index.html</span></span></code></pre></div><p>So you can configure the &#39;window.externalPublicPath&#39; in &#39;index.html&#39; as the default <code>./dist/</code> is modified to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.externalPublicPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./assets/dist/&#39;</span></span></code></pre></div><p>At the same time, the paths of the inline &#39;.ico&#39;, &#39;.js&#39;, and &#39;.css&#39; resources in &#39;index.html&#39; need to be manually modified by you.</p><p>It should be noted that it is best not to adjust the directory hierarchy within the &#39;dist&#39; directory, otherwise exceptions may occur.</p><p>If you want to replace some of the static resources, such as the theme image and structure image, with your own designed image, you can directly overwrite it with the same name.</p>`,85),p=[t];function l(h,o,r,k,d,c){return i(),a("div",null,p)}const y=s(e,[["render",l]]);export{E as __pageData,y as default};
