import{_ as e,c as o,o as a,a4 as t}from"./chunks/framework.B358x4hV.js";const v=JSON.parse('{"title":"Render 实例","description":"","frontmatter":{},"headers":[],"relativePath":"api/render.md","filePath":"api/render.md"}'),d={name:"api/render.md"},i=t(`<h1 id="render-实例" tabindex="-1">Render 实例 <a class="header-anchor" href="#render-实例" aria-label="Permalink to &quot;Render 实例&quot;">​</a></h1><p><code>render</code>实例负载整个渲染过程，可通过<code>mindMap.renderer</code>获取到。</p><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="activenodelist" tabindex="-1">activeNodeList <a class="header-anchor" href="#activenodelist" aria-label="Permalink to &quot;activeNodeList&quot;">​</a></h3><p>获取当前激活的节点列表。</p><h3 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-label="Permalink to &quot;root&quot;">​</a></h3><p>节点树，也就是思维导图节点实例树。</p><h3 id="rendertree" tabindex="-1">renderTree <a class="header-anchor" href="#rendertree" aria-label="Permalink to &quot;renderTree&quot;">​</a></h3><p>渲染树，也就是思维导图的数据树。</p><h3 id="layout" tabindex="-1">layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;layout&quot;">​</a></h3><p>当前的布局实例。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="activemultinode-nodelist" tabindex="-1">activeMultiNode(nodeList = []) <a class="header-anchor" href="#activemultinode-nodelist" aria-label="Permalink to &quot;activeMultiNode(nodeList = [])&quot;">​</a></h3><blockquote><p>v0.10.6+</p></blockquote><ul><li><code>nodeList</code>：节点实例列表</li></ul><p>手动激活多个节点，激活单个节点请直接调用节点实例的<code>active()</code>方法。</p><h3 id="cancelactivemultinode-nodelist" tabindex="-1">cancelActiveMultiNode(nodeList = []) <a class="header-anchor" href="#cancelactivemultinode-nodelist" aria-label="Permalink to &quot;cancelActiveMultiNode(nodeList = [])&quot;">​</a></h3><blockquote><p>v0.10.6+</p></blockquote><ul><li><code>nodeList</code>：节点实例列表</li></ul><p>手动取消激活多个节点，取消激活单个节点请直接调用节点实例的<code>deactivate()</code>方法。</p><h3 id="highlightnode-node-range-style" tabindex="-1">highlightNode(node, range, style) <a class="header-anchor" href="#highlightnode-node-range-style" aria-label="Permalink to &quot;highlightNode(node, range, style)&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><ul><li><p><code>node</code>：要高亮的目标节点实例</p></li><li><p><code>range</code>：可选，Array，一个范围数组，[0, 1]</p></li><li><p><code>style</code>：v0.11.1+，设置高亮框的样式，格式和默认值如下：</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    stroke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rgb(94, 200, 248)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;transparent&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>高亮节点或子节点。如果<code>range</code>参数没有传递，那么直接高亮指定的<code>node</code>节点，如果<code>range</code>传递了一个要高亮的子节点的范围，那么会高亮该范围的子节点。</p><p>高亮效果为通过一个矩形框来包裹。</p><blockquote><p>v0.11.1之前的版本，矩形的描边和填充样式可以通过<code>highlightNodeBoxStyle</code>实例化选项进行配置。</p></blockquote><h3 id="closehighlightnode" tabindex="-1">closeHighlightNode() <a class="header-anchor" href="#closehighlightnode" aria-label="Permalink to &quot;closeHighlightNode()&quot;">​</a></h3><blockquote><p>v0.9.0+</p></blockquote><p>隐藏节点高亮框。</p><h3 id="setrootnodecenter" tabindex="-1">setRootNodeCenter() <a class="header-anchor" href="#setrootnodecenter" aria-label="Permalink to &quot;setRootNodeCenter()&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>回到中心主题，即设置根节点到画布中心。</p><h3 id="setdata-data" tabindex="-1">setData(data) <a class="header-anchor" href="#setdata-data" aria-label="Permalink to &quot;setData(data)&quot;">​</a></h3><blockquote><p>v0.7.3+</p></blockquote><p>动态设置思维导图数据。</p><h3 id="clearactive" tabindex="-1">clearActive() <a class="header-anchor" href="#clearactive" aria-label="Permalink to &quot;clearActive()&quot;">​</a></h3><blockquote><p>v0.8.0+已废弃</p></blockquote><p>清除当前激活的节点。</p><h3 id="clearallactive" tabindex="-1">clearAllActive() <a class="header-anchor" href="#clearallactive" aria-label="Permalink to &quot;clearAllActive()&quot;">​</a></h3><blockquote><p>v0.8.0+已废弃</p></blockquote><p>清除当前所有激活节点，并会触发<code>node_active</code>事件 。</p><h3 id="clearactivenode" tabindex="-1">clearActiveNode() <a class="header-anchor" href="#clearactivenode" aria-label="Permalink to &quot;clearActiveNode()&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>清除当前所有激活节点，并会触发<code>node_active</code>事件 。</p><h3 id="clearactivenodelist" tabindex="-1">clearActiveNodeList() <a class="header-anchor" href="#clearactivenodelist" aria-label="Permalink to &quot;clearActiveNodeList()&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>清除当前激活的节点列表。不会触发<code>node_active</code>事件 。</p><h3 id="starttextedit" tabindex="-1">startTextEdit() <a class="header-anchor" href="#starttextedit" aria-label="Permalink to &quot;startTextEdit()&quot;">​</a></h3><blockquote><p>v0.1.6+</p></blockquote><p>若有文字编辑需求可调用该方法，会禁用回车键和删除键相关快捷键防止冲突。</p><p>内部其实调用的是<code>mindMap.keyCommand.save()</code>方法。</p><h3 id="endtextedit" tabindex="-1">endTextEdit() <a class="header-anchor" href="#endtextedit" aria-label="Permalink to &quot;endTextEdit()&quot;">​</a></h3><blockquote><p>v0.1.6+</p></blockquote><p>结束文字编辑，会恢复回车键和删除键相关快捷键。</p><p>内部其实调用的是<code>mindMap.keyCommand.restore()</code>方法。</p><p>如果你是想结束当前正在进行文本编辑中的状态可以调用<code>mindMap.renderer.textEdit.hideEditTextBox()</code>方法。</p><h3 id="addactivenode-node" tabindex="-1">addActiveNode(node) <a class="header-anchor" href="#addactivenode-node" aria-label="Permalink to &quot;addActiveNode(node)&quot;">​</a></h3><blockquote><p>v0.8.0+已废弃</p></blockquote><p>添加节点到激活列表里。</p><h3 id="addnodetoactivelist-node-notemitbeforenodeactiveevent-false" tabindex="-1">addNodeToActiveList(node, notEmitBeforeNodeActiveEvent = false) <a class="header-anchor" href="#addnodetoactivelist-node-notemitbeforenodeactiveevent-false" aria-label="Permalink to &quot;addNodeToActiveList(node, notEmitBeforeNodeActiveEvent = false)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><ul><li><code>notEmitBeforeNodeActiveEvent</code>：v0.9.12+，是否不要派发<code>before_node_active</code>事件，默认为<code>false</code>，即会派发；</li></ul><p>添加节点到激活列表里。如果你想要手动激活某个节点，达到和鼠标点击激活一样的效果，请直接调用节点实例的<code>active()</code>方法。</p><h3 id="removeactivenode-node" tabindex="-1">removeActiveNode(node) <a class="header-anchor" href="#removeactivenode-node" aria-label="Permalink to &quot;removeActiveNode(node)&quot;">​</a></h3><blockquote><p>v0.8.0+已废弃</p></blockquote><p>在激活列表里移除某个节点。</p><h3 id="removenodefromactivelist-node" tabindex="-1">removeNodeFromActiveList(node) <a class="header-anchor" href="#removenodefromactivelist-node" aria-label="Permalink to &quot;removeNodeFromActiveList(node)&quot;">​</a></h3><blockquote><p>v0.8.0+</p></blockquote><p>在激活列表里移除某个节点。</p><h3 id="findactivenodeindex-node" tabindex="-1">findActiveNodeIndex(node) <a class="header-anchor" href="#findactivenodeindex-node" aria-label="Permalink to &quot;findActiveNodeIndex(node)&quot;">​</a></h3><p>检索某个节点在激活列表里的索引。</p><h3 id="getnodeindex-node" tabindex="-1">getNodeIndex(node) <a class="header-anchor" href="#getnodeindex-node" aria-label="Permalink to &quot;getNodeIndex(node)&quot;">​</a></h3><p>获取节点在同级里的位置索引。</p><h3 id="setnodedatarender-node-data-notrender" tabindex="-1">setNodeDataRender(node, data, notRender) <a class="header-anchor" href="#setnodedatarender-node-data-notrender" aria-label="Permalink to &quot;setNodeDataRender(node, data, notRender)&quot;">​</a></h3><ul><li><code>notRender</code>：v0.6.9+，<code>Boolean</code>，默认为<code>false</code>，是否不要触发渲染。</li></ul><p>设置节点数据，即<code>data</code>字段的数据，并会根据节点大小是否变化来判断是否需要重新渲染该节点，<code>data</code>为对象，如：<code>{text: &#39;我是新文本&#39;}</code>。</p><h3 id="movenodeto-node-tonode" tabindex="-1">moveNodeTo(node, toNode) <a class="header-anchor" href="#movenodeto-node-tonode" aria-label="Permalink to &quot;moveNodeTo(node, toNode)&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>移动一个节点作为另一个节点的子节点。</p><h3 id="insertbefore-node-exist" tabindex="-1">insertBefore(node, exist) <a class="header-anchor" href="#insertbefore-node-exist" aria-label="Permalink to &quot;insertBefore(node, exist)&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>将节点移动到另一个节点的前面。</p><h3 id="insertafter-node-exist" tabindex="-1">insertAfter(node, exist) <a class="header-anchor" href="#insertafter-node-exist" aria-label="Permalink to &quot;insertAfter(node, exist)&quot;">​</a></h3><blockquote><p>v0.1.5+</p></blockquote><p>将节点移动到另一个节点的后面。</p><h3 id="movenodetocenter-node-resetscale" tabindex="-1">moveNodeToCenter(node, resetScale) <a class="header-anchor" href="#movenodetocenter-node-resetscale" aria-label="Permalink to &quot;moveNodeToCenter(node, resetScale)&quot;">​</a></h3><blockquote><p>v0.2.17+</p></blockquote><ul><li><code>resetScale</code>：v0.10.1+， 指定是否要将画布缩放值复位为100%，当你没有显式传递时，默认值为undefined，因为实例化选项的resetScaleOnMoveNodeToCenter配置也会决定是否复位缩放，所以当你没有显式传递时使用resetScaleOnMoveNodeToCenter配置，否则使用resetScale配置</li></ul><p>移动节点到画布中心。</p><h3 id="expandtonodeuid-uid-callback" tabindex="-1">expandToNodeUid(uid, callback) <a class="header-anchor" href="#expandtonodeuid-uid-callback" aria-label="Permalink to &quot;expandToNodeUid(uid, callback)&quot;">​</a></h3><blockquote><p>v0.6.7+</p></blockquote><ul><li><p><code>uid</code>：节点 uid</p></li><li><p><code>callback</code>：展开完成的回调函数</p></li></ul><p>展开到指定 uid 的节点。</p><h3 id="findnodebyuid-uid" tabindex="-1">findNodeByUid(uid) <a class="header-anchor" href="#findnodebyuid-uid" aria-label="Permalink to &quot;findNodeByUid(uid)&quot;">​</a></h3><blockquote><p>v0.6.7+</p></blockquote><ul><li><code>uid</code>：节点 uid</li></ul><p>根据 uid 找到对应的节点实例。</p><h3 id="copy" tabindex="-1">copy() <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;copy()&quot;">​</a></h3><blockquote><p>v0.6.8+</p></blockquote><p>复制节点，调用该方法后会存储当前激活的节点数据，后续调用<code>paste()</code>方法时可以进行粘贴。</p><p>如果浏览器及协议（https）支持<code>js</code>操作剪贴板数据，那么复制的节点数据也会同时添加到用户的剪贴板中。</p><h3 id="cut" tabindex="-1">cut() <a class="header-anchor" href="#cut" aria-label="Permalink to &quot;cut()&quot;">​</a></h3><blockquote><p>v0.6.8+</p></blockquote><p>剪切节点，调用该方法后会剪切当前激活的节点，并且存储该节点数据，后续调用<code>paste()</code>方法时可以进行粘贴。</p><p>如果浏览器及协议（https）支持<code>js</code>操作剪贴板数据，那么复制的节点数据也会同时添加到用户的剪贴板中。</p><h3 id="paste" tabindex="-1">paste() <a class="header-anchor" href="#paste" aria-label="Permalink to &quot;paste()&quot;">​</a></h3><blockquote><p>v0.6.8+</p></blockquote><p>粘贴节点，在调用了<code>copy()</code>或<code>cut()</code>方法后可以调用该方法进行粘贴节点。</p><p>如果浏览器及协议（https）支持<code>js</code>操作剪贴板数据，那么其他地方复制的数据也可以进行粘贴，比如你可以进行跨浏览器粘贴<code>simple-mind-map</code>节点，如果是非<code>simple-mind-map</code>节点数据，那么会提取出剪切板中的文本和图片进行粘贴，文本默认会粘贴为子节点，图片默认会添加到当前的节点中。</p><h3 id="clearcache" tabindex="-1">clearCache() <a class="header-anchor" href="#clearcache" aria-label="Permalink to &quot;clearCache()&quot;">​</a></h3><blockquote><p>v0.9.2+</p></blockquote><p>清空节点缓存池。</p><h3 id="emitnodeactiveevent-node-null-activenodelist-this-activenodelist" tabindex="-1">emitNodeActiveEvent(node = null, activeNodeList = [...this.activeNodeList]) <a class="header-anchor" href="#emitnodeactiveevent-node-null-activenodelist-this-activenodelist" aria-label="Permalink to &quot;emitNodeActiveEvent(node = null, activeNodeList = [...this.activeNodeList])&quot;">​</a></h3><ul><li><p><code>node</code>：本次激活的节点</p></li><li><p><code>activeNodeList</code>：当前所有激活的节点</p></li></ul><p>派发节点激活事件，也就是触发<code>node_active</code>事件。</p>`,116),l=[i];function n(c,r,s,h,p,u){return a(),o("div",null,l)}const k=e(d,[["render",n]]);export{v as __pageData,k as default};
