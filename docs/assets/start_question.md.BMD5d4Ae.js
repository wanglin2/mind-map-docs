import{_ as s,a as i}from"./chunks/错误2.D_4H9di9.js";import{_ as a,c as e,o as n,a4 as t}from"./chunks/framework.B358x4hV.js";const b=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"start/question.md","filePath":"start/question.md"}'),p={name:"start/question.md"},l=t('<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h2 id="_1-在vite中使用报错-提示xml-js依赖出错" tabindex="-1">1.在Vite中使用报错，提示xml-js依赖出错 <a class="header-anchor" href="#_1-在vite中使用报错-提示xml-js依赖出错" aria-label="Permalink to &quot;1.在Vite中使用报错，提示xml-js依赖出错&quot;">​</a></h2><p>解决方法：使用如下引入方式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MindMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;simple-mind-map/dist/simpleMindMap.umd.min&quot;</span></span></code></pre></div><p><code>simple-mind-map</code>包提供未打包的入口字段<code>module</code>，依赖的<code>xml-js</code>包需要引入<code>node</code>环境下的包，所以在<code>Vite</code>中获取不到会报错，所以指定引入打包后的入口，相关包都已打包进产物，所以不会报错。</p><p>如果需要二次开发，也就是必须要使用未打包代码的话，如果你不需要解析<code>xmind</code>文件的话，可以去除<code>xmind</code>模块，如果需要的话那么可以尝试换成其他的解析<code>xml</code>为<code>json</code>的库。</p><h2 id="_2-报错getting-bbox-of-element-text-is-not-possible-typeerror-cannot-read-properties-of-undefined-reading-apply" tabindex="-1">2.报错<code>Getting bbox of element &quot;text&quot; is not possible: TypeError: Cannot read properties of undefined (reading &#39;apply&#39;)</code> <a class="header-anchor" href="#_2-报错getting-bbox-of-element-text-is-not-possible-typeerror-cannot-read-properties-of-undefined-reading-apply" aria-label="Permalink to &quot;2.报错`Getting bbox of element &quot;text&quot; is not possible: TypeError: Cannot read properties of undefined (reading &#39;apply&#39;)`&quot;">​</a></h2><p>原因为安装的<code>@svgdotjs/svg.js</code>版本太高，手动降到<code>3.0.16</code>版本即可。</p><h2 id="_3-typeerror-cannot-read-properties-of-undefined-reading-prototype-at-sax-js-222-46" tabindex="-1">3.TypeError: Cannot read properties of undefined (reading &#39;prototype&#39;) at sax.js:222:46 <a class="header-anchor" href="#_3-typeerror-cannot-read-properties-of-undefined-reading-prototype-at-sax-js-222-46" aria-label="Permalink to &quot;3.TypeError: Cannot read properties of undefined (reading &#39;prototype&#39;) at sax.js:222:46&quot;">​</a></h2><p>可以在打包配置文件中增加如下配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stream-browserify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span></code></pre></div><p>不同的打包工具可能具体配置不一样，原理就是排除<code>stream</code>依赖。</p><h2 id="_4-点击【新建】、【打开】、【另存为】按钮时提示浏览器不支持-或者非https协议。" tabindex="-1">4.点击【新建】、【打开】、【另存为】按钮时提示浏览器不支持，或者非https协议。 <a class="header-anchor" href="#_4-点击【新建】、【打开】、【另存为】按钮时提示浏览器不支持-或者非https协议。" aria-label="Permalink to &quot;4.点击【新建】、【打开】、【另存为】按钮时提示浏览器不支持，或者非https协议。&quot;">​</a></h2><p>浏览器上操作电脑本地文件使用的是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/showOpenFilePicker" target="_blank" rel="noreferrer">window.showOpenFilePicker</a>api，如果不支持，要么是浏览器不支持这个API，要么是因为页面非https协议，你可以按F12，或者在页面通过鼠标右键菜单中的【检查】打开浏览器控制台，在其中的【控制台】或【console】tab中输入<code>window.showOpenFilePicker</code>按回车，如果返回<code>undefined</code>则代表不支持，如果返回的不是这个，而页面依旧提示提示浏览器不支持，或者非https协议，那么可以提交issue，或者联系作者。</p><h2 id="_5-引入simple-mind-map报错-报错信息如下" tabindex="-1">5.引入simple-mind-map报错，报错信息如下： <a class="header-anchor" href="#_5-引入simple-mind-map报错-报错信息如下" aria-label="Permalink to &quot;5.引入simple-mind-map报错，报错信息如下：&quot;">​</a></h2><img src="'+s+'" style="width:850px;"><p>这是因为你的构建环境不支持该js语法，该语法出自<code>@svgdotjs/svg.js</code>库，解决方法如下：</p><p>1.手动降低<code>@svgdotjs/svg.js</code>库的版本，你可以在你的项目中手动安装低版本，比如：<code>npm i @svgdotjs/svg.js@3.2.0</code></p><p>2.不降低版本的话，可以通过修改你的构建工具的相关配置，修改<code>babel</code>的配置，让它编译一下<code>node_modules</code>中的<code>simple-mind-map</code>库，或<code>@svgdotjs/svg.js</code>库，如果用的是<code>vue-cli</code>或<code>vite</code>，它们也直接提供了相关配置。另外需要安装编译该语法的<code>babel</code>插件，并且配置到<code>babel</code>的配置文件中：</p><p><code>@babel/plugin-proposal-nullish-coalescing-operator</code>、<code>@babel/plugin-proposal-optional-chaining</code>。</p><h2 id="_6-启动服务报quill依赖的错误" tabindex="-1">6.启动服务报quill依赖的错误 <a class="header-anchor" href="#_6-启动服务报quill依赖的错误" aria-label="Permalink to &quot;6.启动服务报quill依赖的错误&quot;">​</a></h2><img src="'+i+`" style="width:850px;"><p>当前Node环境不支持用到的js语法，需要编译quill依赖。</p><p>如果你是<code>webpack</code>项目，那么需要修改<code>babel-loader</code>的配置，将<code>quill</code>加到<code>include</code>选项里。</p><p>如果你是<code>vue-cli</code>项目，那么需要将<code>quill</code>加到<code>vue.config.js</code>的<code>transpileDependencies</code>选项里。</p><h2 id="_7-在单应用页面或弹窗场景下创建思维导图-退出页面或关闭弹窗后再打开页面或弹窗-节点文本编辑时删除键不生效。" tabindex="-1">7.在单应用页面或弹窗场景下创建思维导图，退出页面或关闭弹窗后再打开页面或弹窗，节点文本编辑时删除键不生效。 <a class="header-anchor" href="#_7-在单应用页面或弹窗场景下创建思维导图-退出页面或关闭弹窗后再打开页面或弹窗-节点文本编辑时删除键不生效。" aria-label="Permalink to &quot;7.在单应用页面或弹窗场景下创建思维导图，退出页面或关闭弹窗后再打开页面或弹窗，节点文本编辑时删除键不生效。&quot;">​</a></h2><p>如果在节点文本编辑中关闭思维导图，需要在关闭前调用实例的销毁方法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="_8-富文本模式下-节点文本明显偏下-但是编辑中的文本是正常的。" tabindex="-1">8.富文本模式下，节点文本明显偏下，但是编辑中的文本是正常的。 <a class="header-anchor" href="#_8-富文本模式下-节点文本明显偏下-但是编辑中的文本是正常的。" aria-label="Permalink to &quot;8.富文本模式下，节点文本明显偏下，但是编辑中的文本是正常的。&quot;">​</a></h2><p>节点文本明显偏下的原因一般是思维导图容器元素，或容器的任何一个祖先元素显式设置了<code>font-size</code>的样式，所以可以去除给容器元素或任何一个祖先元素设置的<code>font-size</code>样式，如果祖先元素因为一些原因无法去除，那么可以给容器元素添加如下样式：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#mindMapContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>至于编辑中的文本和显示文本不一致，是因为文本编辑框元素默认是插入到页面的<code>body</code>元素下，所以<code>font-size</code>没有影响到文本编辑元素，导致出现不一致，解决方法有两个：</p><p>1.给文本编辑框元素也设置同样的<code>font-size</code>样式：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.smm-richtext-node-edit-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>2.将文本编辑框元素插入到思维导图容器下，或其他可以受<code>font-size</code>样式影响的元素下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MindMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#mindMapContainer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customInnerElsAppendTo: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#mindMapContainer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>如果有其他会影响文本的样式处理同上。</p><h2 id="_9-自定义的节点内容导出图片或svg时没有样式。" tabindex="-1">9.自定义的节点内容导出图片或svg时没有样式。 <a class="header-anchor" href="#_9-自定义的节点内容导出图片或svg时没有样式。" aria-label="Permalink to &quot;9.自定义的节点内容导出图片或svg时没有样式。&quot;">​</a></h2><p><code>v0.12.0+</code>版本可以通过<code>appendCss</code>方法来插入你附加的样式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendCss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    font-size: 18px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    background: red;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>v0.10.1+</code>版本可以使用<code>handleBeingExportSvg</code>选项：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MindMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleBeingExportSvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">svg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xmlns&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.w3.org/1999/xhtml&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        el.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            font-size: 18px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            background: red;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        svg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> svg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>更早的版本暂时没有方便的方法来动态插入样式，建议升级版本。</p><h2 id="_10-跨浏览器窗口无法复制粘贴-或无法粘贴剪贴板中的数据。" tabindex="-1">10.跨浏览器窗口无法复制粘贴，或无法粘贴剪贴板中的数据。 <a class="header-anchor" href="#_10-跨浏览器窗口无法复制粘贴-或无法粘贴剪贴板中的数据。" aria-label="Permalink to &quot;10.跨浏览器窗口无法复制粘贴，或无法粘贴剪贴板中的数据。&quot;">​</a></h2><p>在单个思维导图页面内复制和粘贴仅需要拦截Ctrl+c或Ctrl+v按键即可，复制和粘贴的数据可以简单的通过一个变量来保存，而其他情况需要读写用户剪贴板的数据，需要使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/clipboard" target="_blank" rel="noreferrer">clipboard</a>API，该特性仅在https协议下可用。</p><h2 id="_11-快捷键不生效。" tabindex="-1">11.快捷键不生效。 <a class="header-anchor" href="#_11-快捷键不生效。" aria-label="Permalink to &quot;11.快捷键不生效。&quot;">​</a></h2><p><code>v0.12.2+</code>版本增加了只有当按键事件的事件目标为body或库内部文本编辑框元素时才允许响应快捷键事件，所以如果使用的是该版本以上的版本，且出现了快捷键不生效的问题，那么可以尝试使用<code>customCheckEnableShortcut</code>实例化选项来传递一个自定义的判断函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MindMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 传递一个函数，接收按键事件对象e为参数，需要返回true或false，返回true代表允许响应快捷键事件，反之不允许，库默认当事件目标为body，或为文本编辑框元素（普通文本编辑框、富文本编辑框、关联线文本编辑框）时响应快捷键，其他不响应</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customCheckEnableShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>一个可能的原因：</p><p>当前焦点如果不在一个明显的输入框中，按键事件的事件目标（e.target）却不是<code>body</code>，有可能是某个元素存在tabIndex属性导致捕获到聚焦状态。</p></blockquote><h2 id="_12-思维导图容器的父容器存在滚动条时导出图片会出现节点显示不全的问题" tabindex="-1">12.思维导图容器的父容器存在滚动条时导出图片会出现节点显示不全的问题 <a class="header-anchor" href="#_12-思维导图容器的父容器存在滚动条时导出图片会出现节点显示不全的问题" aria-label="Permalink to &quot;12.思维导图容器的父容器存在滚动条时导出图片会出现节点显示不全的问题&quot;">​</a></h2><p>解决方法：</p><p>1.每次当滚动条滚动后调用mindMap.getElRectInfo()方法；</p><p>2.在调导出的方法前先调mindMap.getElRectInfo()方法；</p>`,53),h=[l];function d(o,k,r,c,E,g){return n(),e("div",null,h)}const F=a(p,[["render",d]]);export{b as __pageData,F as default};
