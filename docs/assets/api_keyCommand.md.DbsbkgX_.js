import{_ as a,c as e,o as s,a4 as i}from"./chunks/framework.B358x4hV.js";const m=JSON.parse('{"title":"KeyCommand实例","description":"","frontmatter":{},"headers":[],"relativePath":"api/keyCommand.md","filePath":"api/keyCommand.md"}'),t={name:"api/keyCommand.md"},n=i(`<h1 id="keycommand实例" tabindex="-1">KeyCommand实例 <a class="header-anchor" href="#keycommand实例" aria-label="Permalink to &quot;KeyCommand实例&quot;">​</a></h1><p><code>keyCommand</code>实例负责快捷键的添加及触发，内置了一些快捷键，也可以自行添加。可通过<code>mindMap.keyCommand</code>获取到该实例。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="addshortcut-key-fn" tabindex="-1">addShortcut(key, fn) <a class="header-anchor" href="#addshortcut-key-fn" aria-label="Permalink to &quot;addShortcut(key, fn)&quot;">​</a></h3><p>添加快捷键</p><p><code>key</code>：快捷键按键，按键值可以通过<a href="https://github.com/wanglin2/mind-map/blob/main/simple-mind-map/src/core/command/keyMap.js" target="_blank" rel="noreferrer">keyMap.js</a>查看。示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单个按键</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.keyCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Enter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.keyCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Del|Backspace&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组合键</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindMap.keyCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addShortcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Control+Enter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p><code>fn</code>：要执行的方法</p><h3 id="removeshortcut-key-fn" tabindex="-1">removeShortcut(key, fn) <a class="header-anchor" href="#removeshortcut-key-fn" aria-label="Permalink to &quot;removeShortcut(key, fn)&quot;">​</a></h3><p>移除快捷键命令，<code>fn</code>不指定则移除该快捷键的所有回调方法</p><h3 id="getshortcutfn-key" tabindex="-1">getShortcutFn(key) <a class="header-anchor" href="#getshortcutfn-key" aria-label="Permalink to &quot;getShortcutFn(key)&quot;">​</a></h3><blockquote><p>v0.2.2+</p></blockquote><p>获取指定快捷键的处理函数</p><h3 id="pause" tabindex="-1">pause() <a class="header-anchor" href="#pause" aria-label="Permalink to &quot;pause()&quot;">​</a></h3><blockquote><p>v0.2.2+</p></blockquote><p>暂停所有快捷键响应</p><h3 id="recovery" tabindex="-1">recovery() <a class="header-anchor" href="#recovery" aria-label="Permalink to &quot;recovery()&quot;">​</a></h3><blockquote><p>v0.2.2+</p></blockquote><p>恢复快捷键响应</p><h3 id="save" tabindex="-1">save() <a class="header-anchor" href="#save" aria-label="Permalink to &quot;save()&quot;">​</a></h3><blockquote><p>v0.2.3+</p></blockquote><p>保存当前注册的快捷键数据，然后清空快捷键数据，如果当前已经存在缓存数据了，那么不做任何处理</p><h3 id="restore" tabindex="-1">restore() <a class="header-anchor" href="#restore" aria-label="Permalink to &quot;restore()&quot;">​</a></h3><blockquote><p>v0.2.3+</p></blockquote><p>恢复保存的快捷键数据，然后清空缓存数据</p><h3 id="hascombinationkey-e" tabindex="-1">hasCombinationKey(e) <a class="header-anchor" href="#hascombinationkey-e" aria-label="Permalink to &quot;hasCombinationKey(e)&quot;">​</a></h3><blockquote><p>v0.6.13+</p></blockquote><ul><li><code>e</code>：事件对象。</li></ul><p>判断是否按下了组合键。</p><h3 id="stopcheckinsvg" tabindex="-1">stopCheckInSvg() <a class="header-anchor" href="#stopcheckinsvg" aria-label="Permalink to &quot;stopCheckInSvg()&quot;">​</a></h3><blockquote><p>v0.14.0+</p></blockquote><p>停止对鼠标是否在画布内的检查，前提是开启了<code>enableShortcutOnlyWhenMouseInSvg</code>实例化选项。</p><p>库内部节点文本编辑、关联线文本编辑、外框文本编辑前都会暂停检查，否则无法响应回车快捷键用于结束编辑。如果你新增了额外的文本编辑，也可以在进入编辑前调用此方法。</p><h3 id="recoverycheckinsvg" tabindex="-1">recoveryCheckInSvg() <a class="header-anchor" href="#recoverycheckinsvg" aria-label="Permalink to &quot;recoveryCheckInSvg()&quot;">​</a></h3><blockquote><p>v0.14.0+</p></blockquote><p>恢复对鼠标是否在画布内的检查。</p>`,36),o=[n];function h(r,l,p,k,c,d){return s(),e("div",null,o)}const y=a(t,[["render",h]]);export{m as __pageData,y as default};
